[{"C:\\Users\\bbarr\\Documents\\Cresendo\\cresendo\\src\\index.js":"1","C:\\Users\\bbarr\\Documents\\Cresendo\\cresendo\\src\\App.js":"2","C:\\Users\\bbarr\\Documents\\Cresendo\\cresendo\\src\\components\\Recipe.js":"3","C:\\Users\\bbarr\\Documents\\Cresendo\\cresendo\\src\\components\\Details.js":"4","C:\\Users\\bbarr\\Documents\\Cresendo\\cresendo\\src\\components\\AddRecipe.js":"5","C:\\Users\\bbarr\\Documents\\Cresendo\\cresendo\\src\\components\\UpdateRecipe.js":"6","C:\\Users\\bbarr\\Documents\\Cresendo\\cresendo\\src\\components\\SignupForm.js":"7","C:\\Users\\bbarr\\Documents\\Cresendo\\cresendo\\src\\actions\\recipe.js":"8","C:\\Users\\bbarr\\Documents\\Cresendo\\cresendo\\src\\helpers\\input.js":"9"},{"size":219,"mtime":1609088839762,"results":"10","hashOfConfig":"11"},{"size":809,"mtime":1609585233675,"results":"12","hashOfConfig":"11"},{"size":1942,"mtime":1609603743999,"results":"13","hashOfConfig":"11"},{"size":2662,"mtime":1609664273912,"results":"14","hashOfConfig":"11"},{"size":4757,"mtime":1609616187969,"results":"15","hashOfConfig":"11"},{"size":4494,"mtime":1609609529393,"results":"16","hashOfConfig":"11"},{"size":3549,"mtime":1609514254886,"results":"17","hashOfConfig":"11"},{"size":733,"mtime":1609651575699,"results":"18","hashOfConfig":"11"},{"size":565,"mtime":1609608490486,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"gaqb8p",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\bbarr\\Documents\\Cresendo\\cresendo\\src\\index.js",[],["41","42"],"C:\\Users\\bbarr\\Documents\\Cresendo\\cresendo\\src\\App.js",[],"C:\\Users\\bbarr\\Documents\\Cresendo\\cresendo\\src\\components\\Recipe.js",[],"C:\\Users\\bbarr\\Documents\\Cresendo\\cresendo\\src\\components\\Details.js",["43","44"],"C:\\Users\\bbarr\\Documents\\Cresendo\\cresendo\\src\\components\\AddRecipe.js",["45"],"import React, { useState, Fragment } from 'react';\r\nimport { useHistory, Link } from 'react-router-dom';\r\nimport { Formik, Form, FieldArray } from 'formik';\r\nimport { postRecipe } from '../actions/recipe';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport * as Yup from 'yup';\r\nimport moment from 'moment';\r\nimport Input from '../helpers/input';\r\n\r\nconst AddRecipe = () => {\r\n  const history = useHistory();\r\n  const [formData, setFormData] = useState({\r\n    uuid: uuidv4(),\r\n    title: '',\r\n    description: '',\r\n    servings: '',\r\n    prepTime: '',\r\n    cookTime: '',\r\n    postDate: '',\r\n    editDate: '',\r\n    amount: '',\r\n    ingredients: [\r\n      {\r\n        uuid: uuidv4(),\r\n        amount: '',\r\n        measurement: '',\r\n        name: '',\r\n      },\r\n    ],\r\n  });\r\n\r\n  const validtionReq = Yup.object({\r\n    title: Yup.string()\r\n      .max(15, 'Must be 15 characters or less')\r\n      .required('Title is required.'),\r\n    description: Yup.string()\r\n      .max(250, 'Must be 250 characters or less')\r\n      .required('Description is required'),\r\n    servings: Yup.number()\r\n      .max(15, 'Must be 15 characters or less')\r\n      .required('Need to put number of Servings'),\r\n    prepTime: Yup.string()\r\n      .max(15, 'Must be 15 characters or less')\r\n      .required('Define the preparation time'),\r\n    cookTime: Yup.string()\r\n      .max(15, 'Must be 15 characters or less')\r\n      .required('Define the cook time'),\r\n\r\n    ingredients: Yup.array().of(\r\n      Yup.object().shape({\r\n        amount: Yup.number()\r\n          .max(2, 'Must be 2 characters or less')\r\n          .required('Specify the amount'),\r\n        measurement: Yup.string()\r\n          .max(15, 'Must be 15 characters or less')\r\n          .required('Specify the required Measurement'),\r\n        name: Yup.string()\r\n          .max(15, 'Must be 15 characters or less')\r\n          .required('Name is required.'),\r\n      })\r\n    ),\r\n  });\r\n\r\n  const addForm = () => {\r\n    return (\r\n      <Formik\r\n        initialValues={formData}\r\n        validationSchema={validtionReq}\r\n        onSubmit={async (values, { setSubmitting }) => {\r\n          values.postDate = moment().format('MM/D/YYYY, LT');\r\n          await postRecipe(values);\r\n          history.push('/');\r\n          setSubmitting(false);\r\n        }}\r\n        render={({ values }) => {\r\n          return (\r\n            <Form>\r\n              <Input type='text' name='title' label='Title'></Input>\r\n              <Input\r\n                as='textarea'\r\n                name='description'\r\n                label='Description'\r\n              ></Input>\r\n              <Input type='number' name='servings' label='Servings'></Input>\r\n              <Input type='text' name='prepTime' label='Prep Time'></Input>\r\n              <Input type='text' name='cookTime' label='Cook Time'></Input>\r\n\r\n              <p>\r\n                <strong>Ingredient</strong>\r\n              </p>\r\n\r\n              <FieldArray\r\n                name='ingredients'\r\n                render={({ push }) => (\r\n                  <Fragment>\r\n                    {values.ingredients.map((ingredients, i) => (\r\n                      <div className='ingredient' key={i}>\r\n                        <Input\r\n                          type='number'\r\n                          name={`ingredients[${i}].amount`}\r\n                          label='Amount'\r\n                        ></Input>\r\n                        <Input\r\n                          type='text'\r\n                          name={`ingredients[${i}].measurement`}\r\n                          label='Measurement'\r\n                        ></Input>\r\n                        <Input\r\n                          type='text'\r\n                          name={`ingredients[${i}].name`}\r\n                          label='Name'\r\n                        ></Input>\r\n                      </div>\r\n                    ))}\r\n                    <div>\r\n                      <button\r\n                        type='button'\r\n                        onClick={async () => {\r\n                          await push({\r\n                            uuid: null,\r\n                            amount: '',\r\n                            measurement: '',\r\n                            name: '',\r\n                          });\r\n                        }}\r\n                      >\r\n                        Add Ingredient\r\n                      </button>\r\n                    </div>\r\n                  </Fragment>\r\n                )}\r\n              ></FieldArray>\r\n\r\n              <button type='submit'>Submit</button>\r\n            </Form>\r\n          );\r\n        }}\r\n      ></Formik>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Link to='/'>Go Back</Link>\r\n      <h1>Add Recipe</h1>\r\n      {addForm()}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default AddRecipe;\r\n","C:\\Users\\bbarr\\Documents\\Cresendo\\cresendo\\src\\components\\UpdateRecipe.js",["46"],"import React, { useState, useEffect, Fragment } from 'react';\r\nimport { useHistory, Link } from 'react-router-dom';\r\nimport { Formik, Form, FieldArray } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport moment from 'moment';\r\nimport { updateRecipe, getRecipeById } from '../actions/recipe';\r\nimport Input from '../helpers/input';\r\n\r\nconst UpdateRecipe = ({\r\n  match: {\r\n    params: { id },\r\n  },\r\n}) => {\r\n  const history = useHistory();\r\n  const [formData, setFormData] = useState();\r\n\r\n  const handleData = async () => {\r\n    setFormData(await getRecipeById(id));\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleData();\r\n  }, []);\r\n\r\n  const validtionReq = Yup.object({\r\n    title: Yup.string()\r\n      .max(15, 'Must be 15 characters or less')\r\n      .required('Title is required.'),\r\n    description: Yup.string()\r\n      .max(250, 'Must be 250 characters or less')\r\n      .required('Description is required'),\r\n    servings: Yup.number()\r\n      .max(15, 'Must be 15 characters or less')\r\n      .required('Need to put number of Servings'),\r\n    prepTime: Yup.string()\r\n      .max(15, 'Must be 15 characters or less')\r\n      .required('Define the preparation time'),\r\n    cookTime: Yup.string()\r\n      .max(15, 'Must be 15 characters or less')\r\n      .required('Define the cook time'),\r\n\r\n    ingredients: Yup.array().of(\r\n      Yup.object().shape({\r\n        amount: Yup.number().max(2, 'Must be 2 characters or less'),\r\n        measurement: Yup.string().max(15, 'Must be 15 characters or less'),\r\n        name: Yup.string().max(15, 'Must be 15 characters or less'),\r\n      })\r\n    ),\r\n  });\r\n\r\n  const updateForm = () => {\r\n    return formData !== undefined ? (\r\n      <Formik\r\n        initialValues={formData}\r\n        validationSchema={validtionReq}\r\n        onSubmit={async (values, { setSubmitting }) => {\r\n          values.editDate = moment().format('MM/D/YYYY, LT');\r\n          await updateRecipe(id, values);\r\n          history.push('/');\r\n          setSubmitting(false);\r\n        }}\r\n        render={({ values }) => {\r\n          return (\r\n            <Form>\r\n              <Input type='text' name='title' label='Title'></Input>\r\n              <Input\r\n                as='textarea'\r\n                name='description'\r\n                label='Description'\r\n              ></Input>\r\n              <Input type='number' name='servings' label='Servings'></Input>\r\n              <Input type='text' name='prepTime' label='Prep Time'></Input>\r\n              <Input type='text' name='cookTime' label='Cook Time'></Input>\r\n\r\n              <p>\r\n                <strong>Ingredient</strong>\r\n              </p>\r\n\r\n              <FieldArray\r\n                name='ingredients'\r\n                render={({ push }) => (\r\n                  <Fragment>\r\n                    {values.ingredients.map((ingredient, i) => (\r\n                      <div className='ingredient' key={i}>\r\n                        <Input\r\n                          type='number'\r\n                          name={`ingredients[${i}].amount`}\r\n                          label='Amount'\r\n                        ></Input>\r\n                        <Input\r\n                          type='text'\r\n                          name={`ingredients[${i}].measurement`}\r\n                          label='Measurement'\r\n                        ></Input>\r\n                        <Input\r\n                          type='text'\r\n                          name={`ingredients[${i}].name`}\r\n                          label='Name'\r\n                        ></Input>\r\n                      </div>\r\n                    ))}\r\n                    <div>\r\n                      <button\r\n                        type='button'\r\n                        onClick={async () => {\r\n                          await push({\r\n                            uuid: null,\r\n                            amount: '',\r\n                            measurement: '',\r\n                            name: '',\r\n                          });\r\n                        }}\r\n                      >\r\n                        Add Ingredient\r\n                      </button>\r\n                    </div>\r\n                  </Fragment>\r\n                )}\r\n              ></FieldArray>\r\n\r\n              <button type='submit'>Submit</button>\r\n            </Form>\r\n          );\r\n        }}\r\n      ></Formik>\r\n    ) : undefined;\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Link to='/'>Go Back</Link>\r\n      <h1>Update Recipe</h1>\r\n      {updateForm()}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default UpdateRecipe;\r\n","C:\\Users\\bbarr\\Documents\\Cresendo\\cresendo\\src\\components\\SignupForm.js",["47"],"C:\\Users\\bbarr\\Documents\\Cresendo\\cresendo\\src\\actions\\recipe.js",[],"C:\\Users\\bbarr\\Documents\\Cresendo\\cresendo\\src\\helpers\\input.js",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":21,"column":6,"nodeType":"54","endLine":21,"endColumn":8,"suggestions":"55"},{"ruleId":"56","severity":1,"message":"57","line":51,"column":20,"nodeType":"58","messageId":"59","endLine":51,"endColumn":29},{"ruleId":"60","severity":1,"message":"61","line":12,"column":20,"nodeType":"62","messageId":"63","endLine":12,"endColumn":31},{"ruleId":"52","severity":1,"message":"53","line":23,"column":6,"nodeType":"54","endLine":23,"endColumn":8,"suggestions":"64"},{"ruleId":"60","severity":1,"message":"65","line":2,"column":10,"nodeType":"62","messageId":"63","endLine":2,"endColumn":16},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleData'. Either include it or remove the dependency array.","ArrayExpression",["68"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","no-unused-vars","'setFormData' is assigned a value but never used.","Identifier","unusedVar",["69"],"'render' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"70","fix":"71"},{"desc":"70","fix":"72"},"Update the dependencies array to be: [handleData]",{"range":"73","text":"74"},{"range":"75","text":"74"},[534,536],"[handleData]",[622,624]]